options  {
  STATIC=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package javacc.asint;

public class AnalizadorSintacticoTiny {}
PARSER_END(AnalizadorSintacticoTiny)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digito:["0"-"9"]>}
  TOKEN:{<#parteEntera:(<digito>)+>} 
  TOKEN:{<eq:"==">} 
  TOKEN:{<neq:"!=">} 
  TOKEN:{<gt:">">} 
  TOKEN:{<egt:">=">} 
  TOKEN:{<lt:"<">} 
  TOKEN:{<elt:"<=">} 
  TOKEN:{<and:"and">} 
  TOKEN:{<or:"or">} 
  TOKEN:{<not:"not">} 
  TOKEN:{<bool:"bool">} 
  TOKEN:{<integer:"int">} 
  TOKEN:{<sepsec:"&&">} 
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN:{<identificador:<letra>(<letra>|<digito>|"_")*>}
  TOKEN:{<numeroEntero: (["+","-"])? <parteEntera> >}
  
  void Sp()   : {} {S() <EOF>}
  void S()    : {} {X() <sepsec> E()}
  void X()    : {} {XD() RXD()}
  void RXD()  : {} {";" X() | {}}
  void XD()   : {} {<bool> <identificador> | <integer> <identificador>}
  void E()    : {} {E0() RE()}
  void RE()   : {} { ";" E() | {}}
  void E0()   : {} {E1() RE0()}
  void RE0()  : {} {OP0() E1() | "=" E0() | {}}
  void E1()   : {} {E2() RE1()}
  void RE1()  : {} {OP1() E2() RE1() | {}}
  void E2()   : {} {E3() RE2()}
  void RE2()  : {} {OP2() E3() RE2() | {}}
  void E3()   : {} {OP3() E3() | E4()}
  void E4()   : {} {<identificador> | <numeroEntero> | "true" | "false" | "(" E0() ")"}
  void OP0()  : {} { <lt> | <elt> | <gt> | <egt> | <eq> | <neq> }
  void OP1()  : {} { "+" | "-" | <or> }
  void OP2()  : {} { "*" | "/" | <and> }
  void OP3()  : {} { "-" | <not> } 
