options  {
  STATIC=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package javacc.asint;

public class AnalizadorSintacticoTiny {}
PARSER_END(AnalizadorSintacticoTiny)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digito:["0"-"9"]>}
  TOKEN:{<#parteEntera:(<digito>)+>} 
  TOKEN:{<eq:"==">} 
  TOKEN:{<neq:"!=">} 
  TOKEN:{<gt:">">} 
  TOKEN:{<egt:">=">} 
  TOKEN:{<lt:"<">} 
  TOKEN:{<elt:"<=">} 
  TOKEN:{<and:"and">} 
  TOKEN:{<or:"or">} 
  TOKEN:{<not:"not">} 
  TOKEN:{<bool:"bool">} 
  TOKEN:{<integer:"int">} 
  TOKEN:{<tru:"true">} 
  TOKEN:{<fals:"false">} 
  TOKEN:{<sepsec:"&&">} 
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN:{<identificador:<letra>(<letra>|<digito>|"_")*>}
  TOKEN:{<numeroEntero: (["+","-"])? <parteEntera> >}
  
  void Sp()   : {} {S() <EOF>}
  void T()	  : {} {<bool> | <integer>}
  void S1()   : {} {T() S1() | S()} 
  void S()    : {} {E0() Ds()}
  void Ds()   : {} {<sepsec> LDs() | {} }  
  void LDs()  : {} {D() RLDs()}
  void RLDs() : {} {";" D() RLDs() | {} }
  void D()    : {} {<identificador> "=" E0()}
  void E0()   : {} {E1() RE0()}
  void RE0()  : {} {OP0() E1() RE0() | {} }
  void E1()   : {} {E2() RE1() }
  void RE1()  : {} {OP1() E2() RE1() | {} }
  void E2()   : {} {<numeroEntero> | <identificador> | "(" E0() ")"} 
  void OP0()  : {} {"+" | "-"}
  void OP1()  : {} {"*" | "/"}
  
